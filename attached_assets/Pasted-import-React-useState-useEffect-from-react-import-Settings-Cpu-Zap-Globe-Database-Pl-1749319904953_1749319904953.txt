import React, { useState, useEffect } from 'react';
import { Settings, Cpu, Zap, Globe, Database, Plus, Play, Pause, AlertTriangle, CheckCircle, TrendingUp, DollarSign, Code, Monitor, Server, Wifi, BarChart3, Wrench, Network } from 'lucide-react';

const MiningPlatform = () => {
 const [activeTab, setActiveTab] = useState('dashboard');
 const [rigs, setRigs] = useState([
   { id: 1, name: 'Rig Alpha', hashRate: 110, power: 3250, temp: 67, status: 'mining', pool: 'Pool A', hardware: 'ASIC S19 Pro', autoConfig: true },
   { id: 2, name: 'Rig Beta', hashRate: 95, power: 2900, temp: 63, status: 'idle', pool: 'Pool B', hardware: 'ASIC S17+', autoConfig: true },
   { id: 3, name: 'Custom Rig 1', hashRate: 125, power: 3500, temp: 71, status: 'mining', pool: 'Platform Pool', hardware: 'Custom ASIC', autoConfig: false }
 ]);

 const [pools, setPools] = useState([
   { id: 1, name: 'Pool A', url: 'stratum+tcp://pool-a.com:4444', status: 'connected', hashRate: 205, address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', managed: false },
   { id: 2, name: 'Pool B', url: 'stratum+tcp://pool-b.com:3333', status: 'connected', hashRate: 0, address: '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy', managed: false },
   { id: 3, name: 'Platform Pool', url: 'stratum+tcp://platform.pool:8080', status: 'connected', hashRate: 125, address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh', managed: true }
 ]);

 const [hardwareProfiles, setHardwareProfiles] = useState([
   { id: 1, name: 'ASIC S19 Pro', maxHashRate: 110, powerDraw: 3250, algorithm: 'SHA-256' },
   { id: 2, name: 'ASIC S17+', maxHashRate: 95, powerDraw: 2900, algorithm: 'SHA-256' },
   { id: 3, name: 'ASIC L7', maxHashRate: 9500, powerDraw: 3425, algorithm: 'Scrypt' },
   { id: 4, name: 'Custom ASIC', maxHashRate: 150, powerDraw: 4000, algorithm: 'SHA-256' }
 ]);

 const [totalHashRate, setTotalHashRate] = useState(0);
 const [newRig, setNewRig] = useState({ name: '', hardware: 'ASIC S19 Pro', hashRate: 100, autoConfig: true });
 const [newPool, setNewPool] = useState({ name: '', url: '', address: '', managed: false });
 const [platformCapacity] = useState(7000); // 7000 TH/s capacity
 const [rigCode, setRigCode] = useState('');
 const [showRigCreator, setShowRigCreator] = useState(false);

 useEffect(() => {
   const total = rigs.filter(rig => rig.status === 'mining').reduce((sum, rig) => sum + rig.hashRate, 0);
   setTotalHashRate(total);
 }, [rigs]);

 const createRig = () => {
   if (newRig.name) {
     const selectedHardware = hardwareProfiles.find(h => h.name === newRig.hardware);
     const rig = {
       id: rigs.length + 1,
       name: newRig.name,
       hashRate: parseInt(newRig.hashRate),
       power: selectedHardware ? selectedHardware.powerDraw : parseInt(newRig.hashRate) * 25,
       temp: Math.floor(Math.random() * 20) + 60,
       status: 'idle',
       pool: 'Platform Pool',
       hardware: newRig.hardware,
       autoConfig: newRig.autoConfig
     };
     setRigs([...rigs, rig]);
     setNewRig({ name: '', hardware: 'ASIC S19 Pro', hashRate: 100, autoConfig: true });
   }
 };

 const createCustomHardware = () => {
   const newHardware = {
     id: hardwareProfiles.length + 1,
     name: `Custom Hardware ${hardwareProfiles.length + 1}`,
     maxHashRate: 120,
     powerDraw: 3200,
     algorithm: 'SHA-256'
   };
   setHardwareProfiles([...hardwareProfiles, newHardware]);
 };

 const toggleRig = (rigId) => {
   setRigs(rigs.map(rig =>
     rig.id === rigId
       ? { ...rig, status: rig.status === 'mining' ? 'idle' : 'mining' }
       : rig
   ));
 };

 const createPool = () => {
   if (newPool.name && newPool.url) {
     const pool = {
       id: pools.length + 1,
       name: newPool.name,
       url: newPool.url,
       address: newPool.address,
       status: 'connected',
       hashRate: 0,
       managed: newPool.managed
     };
     setPools([...pools, pool]);
     setNewPool({ name: '', url: '', address: '', managed: false });
   }
 };

 const assignRigToPool = (rigId, poolName) => {
   setRigs(rigs.map(rig =>
     rig.id === rigId ? { ...rig, pool: poolName } : rig
   ));
 };

 const autoConfigureRig = (rigId) => {
   setRigs(rigs.map(rig =>
     rig.id === rigId
       ? { ...rig, autoConfig: !rig.autoConfig, status: 'configuring' }
       : rig
   ));

   // Simulate auto-configuration
   setTimeout(() => {
     setRigs(prevRigs =>
       prevRigs.map(rig =>
         rig.id === rigId
           ? { ...rig, status: 'idle', temp: Math.floor(Math.random() * 15) + 55 }
           : rig
       )
     );
   }, 2000);
 };

 const deployRigCode = () => {
   if (rigCode.trim()) {
     // Simulate code deployment to create a new rig
     const codeRig = {
       id: rigs.length + 1,
       name: `Code Rig ${rigs.length + 1}`,
       hashRate: Math.floor(Math.random() * 50) + 80,
       power: Math.floor(Math.random() * 1000) + 2500,
       temp: Math.floor(Math.random() * 20) + 60,
       status: 'idle',
       pool: 'Platform Pool',
       hardware: 'Custom Coded',
       autoConfig: true
     };
     setRigs([...rigs, codeRig]);
     setRigCode('');
     alert('Rig successfully coded and deployed!');
   }
 };

 const renderDashboard = () => (
   <div className="space-y-6">
     <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
       <div className="bg-blue-50 p-4 rounded-lg border">
         <div className="flex items-center justify-between">
           <div>
             <p className="text-sm text-gray-600">Total Hash Rate</p>
             <p className="text-2xl font-bold text-blue-600">{totalHashRate} TH/s</p>
             <p className="text-xs text-gray-500">of {platformCapacity} TH/s capacity</p>
           </div>
           <TrendingUp className="h-8 w-8 text-blue-500" />
         </div>
       </div>

       <div className="bg-green-50 p-4 rounded-lg border">
         <div className="flex items-center justify-between">
           <div>
             <p className="text-sm text-gray-600">Active Rigs</p>
             <p className="text-2xl font-bold text-green-600">{rigs.filter(r => r.status === 'mining').length}</p>
             <p className="text-xs text-gray-500">of {rigs.length} total rigs</p>
           </div>
           <Cpu className="h-8 w-8 text-green-500" />
         </div>
       </div>

       <div className="bg-yellow-50 p-4 rounded-lg border">
         <div className="flex items-center justify-between">
           <div>
             <p className="text-sm text-gray-600">Power Usage</p>
             <p className="text-2xl font-bold text-yellow-600">{rigs.reduce((sum, rig) => sum + (rig.status === 'mining' ? rig.power : 0), 0)}W</p>
             <p className="text-xs text-gray-500">Active consumption</p>
           </div>
           <Zap className="h-8 w-8 text-yellow-500" />
         </div>
       </div>

       <div className="bg-purple-50 p-4 rounded-lg border">
         <div className="flex items-center justify-between">
           <div>
             <p className="text-sm text-gray-600">Platform Usage</p>
             <p className="text-2xl font-bold text-purple-600">{(totalHashRate / platformCapacity * 100).toFixed(1)}%</p>
             <p className="text-xs text-gray-500">Capacity utilized</p>
           </div>
           <Database className="h-8 w-8 text-purple-500" />
         </div>
       </div>
     </div>

     <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
       <div className="bg-white p-6 rounded-lg border">
         <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
           <Server className="h-5 w-5" />
           Active Mining Rigs
         </h3>
         <div className="space-y-3">
           {rigs.filter(rig => rig.status === 'mining').map(rig => (
             <div key={rig.id} className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
               <div>
                 <p className="font-medium">{rig.name}</p>
                 <p className="text-sm text-gray-600">{rig.hardware} - {rig.hashRate} TH/s</p>
               </div>
               <div className="text-right">
                 <p className="text-sm font-medium text-green-600">{rig.temp}Â°C</p>
                 <p className="text-xs text-gray-500">{rig.pool}</p>
               </div>
             </div>
           ))}
         </div>
       </div>

       <div className="bg-white p-6 rounded-lg border">
         <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
           <Network className="h-5 w-5" />
           Pool Status
         </h3>
         <div className="space-y-3">
           {pools.map(pool => (
             <div key={pool.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
               <div>
                 <p className="font-medium flex items-center gap-2">
                   {pool.name}
                   {pool.managed && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Managed</span>}
                 </p>
                 <p className="text-sm text-gray-600">{pool.hashRate} TH/s</p>
               </div>
               <div className="flex items-center gap-2">
                 <CheckCircle className="h-4 w-4 text-green-500" />
                 <span className="text-sm text-green-600">Connected</span>
               </div>
             </div>
           ))}
         </div>
       </div>
     </div>
   </div>
 );

 const renderRigs = () => (
   <div className="space-y-6">
     <div className="flex justify-between items-center">
       <h2 className="text-2xl font-bold">Mining Rigs Management</h2>
       <button
         onClick={() => setShowRigCreator(!showRigCreator)}
         className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"

         <Plus className="h-4 w-4" />
         Create New Rig
       </button>
     </div>

     {showRigCreator && (
       <div className="bg-white p-6 rounded-lg border">
         <h3 className="text-lg font-semibold mb-4">Create New Mining Rig</h3>
         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
           <input
             type="text"
             placeholder="Rig Name"
             value={newRig.name}
             onChange={(e) => setNewRig({...newRig, name: e.target.value})}
             className="border rounded-lg px-3 py-2"
           />
           <select
             value={newRig.hardware}
             onChange={(e) => setNewRig({...newRig, hardware: e.target.value})}
             className="border rounded-lg px-3 py-2"

             {hardwareProfiles.map(hw => (
               <option key={hw.id} value={hw.name}>{hw.name}</option>
             ))}
           </select>
           <input
             type="number"
             placeholder="Hash Rate (TH/s)"
             value={newRig.hashRate}
             onChange={(e) => setNewRig({...newRig, hashRate: e.target.value})}
             className="border rounded-lg px-3 py-2"
           />
           <div className="flex items-center gap-2">
             <input
               type="checkbox"
               checked={newRig.autoConfig}
               onChange={(e) => setNewRig({...newRig, autoConfig: e.target.checked})}
               className="rounded"
             />
             <label className="text-sm">Auto-configure</label>
           </div>
         </div>
         <div className="flex gap-2">
           <button
             onClick={createRig}
             className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"

             Create Rig
           </button>
           <button
             onClick={createCustomHardware}
             className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700"

             Add Custom Hardware
           </button>
         </div>
       </div>
     )}

     <div className="bg-white p-6 rounded-lg border">
       <h3 className="text-lg font-semibold mb-4">All Mining Rigs</h3>
       <div className="overflow-x-auto">
         <table className="w-full">
           <thead>
             <tr className="border-b">
               <th className="text-left p-2">Rig Name</th>
               <th className="text-left p-2">Hardware</th>
               <th className="text-left p-2">Hash Rate</th>
               <th className="text-left p-2">Power</th>
               <th className="text-left p-2">Temp</th>
               <th className="text-left p-2">Pool</th>
               <th className="text-left p-2">Status</th>
               <th className="text-left p-2">Auto-Config</th>
               <th className="text-left p-2">Actions</th>
             </tr>
           </thead>
           <tbody>
             {rigs.map(rig => (
               <tr key={rig.id} className="border-b hover:bg-gray-50">
                 <td className="p-2 font-medium">{rig.name}</td>
                 <td className="p-2 text-sm">{rig.hardware}</td>
                 <td className="p-2">{rig.hashRate} TH/s</td>
                 <td className="p-2">{rig.power}W</td>
                 <td className="p-2">{rig.temp}Â°C</td>
                 <td className="p-2">
                   <select
                     value={rig.pool}
                     onChange={(e) => assignRigToPool(rig.id, e.target.value)}
                     className="text-sm border rounded px-2 py-1"

                     {pools.map(pool => (
                       <option key={pool.id} value={pool.name}>{pool.name}</option>
                     ))}
                   </select>
                 </td>
                 <td className="p-2">
                   <span className={`px-2 py-1 rounded-full text-xs ${
                     rig.status === 'mining' ? 'bg-green-100 text-green-800' :
                     rig.status === 'configuring' ? 'bg-yellow-100 text-yellow-800' :
                     'bg-gray-100 text-gray-800'
                   }`}>
                     {rig.status}
                   </span>
                 </td>
                 <td className="p-2">
                   <button
                     onClick={() => autoConfigureRig(rig.id)}
                     className={`p-1 rounded text-xs ${
                       rig.autoConfig ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                     }`}

                     {rig.autoConfig ? 'ON' : 'OFF'}
                   </button>
                 </td>
                 <td className="p-2">
                   <div className="flex gap-1">
                     <button
                       onClick={() => toggleRig(rig.id)}
                       className={`p-1 rounded ${
                         rig.status === 'mining' ? 'text-red-600 hover:bg-red-50' : 'text-green-600 hover:bg-green-50'
                       }`}

                       {rig.status === 'mining' ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                     </button>
                     <button className="p-1 rounded text-blue-600 hover:bg-blue-50">
                       <Settings className="h-4 w-4" />
                     </button>
                   </div>
                 </td>
               </tr>
             ))}
           </tbody>
         </table>
       </div>
     </div>
   </div>
 );

 const renderPools = () => (
   <div className="space-y-6">
     <div className="flex justify-between items-center">
       <h2 className="text-2xl font-bold">Pool Management</h2>
     </div>

     <div className="bg-white p-6 rounded-lg border">
       <h3 className="text-lg font-semibold mb-4">Add New Pool</h3>
       <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
         <input
           type="text"
           placeholder="Pool Name"
           value={newPool.name}
           onChange={(e) => setNewPool({...newPool, name: e.target.value})}
           className="border rounded-lg px-3 py-2"
         />
         <input
           type="text"
           placeholder="Pool URL (stratum+tcp://...)"
           value={newPool.url}
           onChange={(e) => setNewPool({...newPool, url: e.target.value})}
           className="border rounded-lg px-3 py-2"
         />
         <input
           type="text"
           placeholder="Platform Address"
           value={newPool.address}
           onChange={(e) => setNewPool({...newPool, address: e.target.value})}
           className="border rounded-lg px-3 py-2"
         />
         <div className="flex items-center gap-2">
           <input
             type="checkbox"
             checked={newPool.managed}
             onChange={(e) => setNewPool({...newPool, managed: e.target.checked})}
             className="rounded"
           />
           <label className="text-sm">Platform Managed Pool</label>
         </div>
       </div>
       <button
         onClick={createPool}
         className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"

         Add Pool
       </button>
     </div>

     <div className="bg-white p-6 rounded-lg border">
       <h3 className="text-lg font-semibold mb-4">Connected Pools</h3>
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         {pools.map(pool => (
           <div key={pool.id} className="border rounded-lg p-4">
             <div className="flex items-center justify-between mb-2">
               <h4 className="font-medium flex items-center gap-2">
                 {pool.name}
                 {pool.managed && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Managed</span>}
               </h4>
               <div className="flex items-center gap-1">
                 <CheckCircle className="h-4 w-4 text-green-500" />
                 <span className="text-sm text-green-600">{pool.status}</span>
               </div>
             </div>
             <p className="text-sm text-gray-600 mb-1">URL: {pool.url}</p>
             <p className="text-sm text-gray-600 mb-2">Address: {pool.address}</p>
             <div className="flex items-center justify-between">
               <span className="text-sm font-medium">Hash Rate: {pool.hashRate} TH/s</span>
               <div className="flex gap-2">
                 <button className="text-blue-600 hover:bg-blue-50 p-1 rounded">
                   <Settings className="h-4 w-4" />
                 </button>
                 <button className="text-green-600 hover:bg-green-50 p-1 rounded">
                   <Wifi className="h-4 w-4" />
                 </button>
               </div>
             </div>
           </div>
         ))}
       </div>
     </div>
   </div>
 );

 const renderCoding = () => (
   <div className="space-y-6">
     <div className="flex justify-between items-center">
       <h2 className="text-2xl font-bold">Rig Coding Interface</h2>
     </div>

     <div className="bg-white p-6 rounded-lg border">
       <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
         <Code className="h-5 w-5" />
         Code Your Own Mining Rig
       </h3>
       <p className="text-gray-600 mb-4">Write code to automatically configure and deploy new mining rigs with custom parameters.</p>

       <div className="mb-4">
         <label className="block text-sm font-medium mb-2">Rig Configuration Code</label>
         <textarea
           value={rigCode}
           onChange={(e) => setRigCode(e.target.value)}
           placeholder={`// Example rig configuration
{
 "name": "CustomRig_${Date.now()}",
 "hardware": "ASIC_Custom",
 "hashRate": 120,
 "powerLimit": 3200,
 "tempThreshold": 75,
 "algorithm": "SHA-256",
 "autoOptimize": true,
 "poolPriority": ["Platform Pool", "Pool A"],
 "overclockProfile": "balanced"
}`}
           className="w-full h-64 border rounded-lg px-3 py-2 font-mono text-sm"
         />
       </div>

       <div className="flex gap-2 mb-4">
         <button
           onClick={deployRigCode}
           className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2"

           <Play className="h-4 w-4" />
           Deploy Rig
         </button>
         <button
           onClick={() => setRigCode('')}
           className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"

           Clear Code
         </button>
       </div>

       <div className="bg-gray-50 p-4 rounded-lg">
         <h4 className="font-medium mb-2">Available APIs & Functions:</h4>
         <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
           <div>â¢ createRig(config)</div>
           <div>â¢ optimizeHashRate(rigId)</div>
           <div>â¢ setPoolConnection(rigId, poolUrl)</div>
           <div>â¢ autoTuneHardware(rigId)</div>
           <div>â¢ monitorTemperature(rigId)</div>
           <div>â¢ scheduleMaintenance(rigId, interval)</div>
           <div>â¢ enableOverclock(rigId, profile)</div>
           <div>â¢ setPowerLimit(rigId, watts)</div>
         </div>
       </div>
     </div>

     <div className="bg-white p-6 rounded-lg border">
       <h3 className="text-lg font-semibold mb-4">Hardware Profiles</h3>
       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
         {hardwareProfiles.map(hw => (
           <div key={hw.id} className="border rounded-lg p-4">
             <h4 className="font-medium mb-2">{hw.name}</h4>
             <div className="text-sm text-gray-600 space-y-1">
               <p>Max Hash Rate: {hw.maxHashRate} TH/s</p>
               <p>Power Draw: {hw.powerDraw}W</p>
               <p>Algorithm: {hw.algorithm}</p>
             </div>
             <button className="mt-2 text-blue-600 hover:bg-blue-50 px-2 py-1 rounded text-sm">
               Use in Code
             </button>
           </div>
         ))}
       </div>
     </div>
   </div>
 );

 const renderAnalytics = () => (
   <div className="space-y-6">
     <h2 className="text-2xl font-bold">Platform Analytics</h2>

     <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
       <div className="bg-white p-6 rounded-lg border">
         <h3 className="text-lg font-semibold mb-4">Efficiency Metrics</h3>
         <div className="space-y-3">
           <div className="flex justify-between">
             <span className="text-gray-600">Hash/Watt Ratio:</span>
             <span className="font-medium">{(totalHashRate / (rigs.reduce((sum, rig) => sum + (rig.status === 'mining' ? rig.power : 0), 0) / 1000) || 0).toFixed(2)} TH/kW</span>
           </div>
           <div className="flex justify-between">
             <span className="text-gray-600">Platform Utilization:</span>
             <span className="font-medium">{(totalHashRate / platformCapacity * 100).toFixed(1)}%</span>
           </div>
           <div className="flex justify-between">
             <span className="text-gray-600">Active Uptime:</span>
             <span className="font-medium">99.2%</span>
           </div>
         </div>
       </div>

       <div className="bg-white p-6 rounded-lg border">
         <h3 className="text-lg font-semibold mb-4">Revenue Projection</h3>
         <div className="space-y-3">
           <div className="flex justify-between">
             <span className="text-gray-600">Daily Estimate:</span>
             <span className="font-medium text-green-600">$245.80</span>
           </div>
           <div className="flex justify-between">
             <span className="text-gray-600">Monthly Estimate:</span>
             <span className="font-medium text-green-600">$7,374</span>
           </div>
           <div className="flex justify-between">
             <span className="text-gray-600">Power Cost:</span>
             <span className="font-medium text-red-600">-$89.20/day</span>
           </div>
         </div>
       </div>

       <div className="bg-white p-6 rounded-lg border">
         <h3 className="text-lg font-semibold mb-4">System Health</h3>
         <div className="space-y-3">
           <div className="flex justify-between">
             <span className="text-gray-600">Avg Temperature:</span>
             <span className="font-medium">67Â°C</span>
           </div>
           <div className="flex justify-between">
             <span className="text-gray-600">Error Rate:</span>
             <span className="font-medium text-green-600">0.02%

import React, { useState, useEffect } from âreactâ;
import { Settings, Cpu, Zap, Globe, Database, Plus, Play, Pause, AlertTriangle, CheckCircle, TrendingUp, DollarSign, Code, Monitor, Server, Wifi, BarChart3, Wrench, Network } from âlucide-reactâ;

const MiningPlatform = () => {
const [activeTab, setActiveTab] = useState(âdashboardâ);
const [rigs, setRigs] = useState([
{ id: 1, name: âTERACORE7â, hashRate: 110, power: 3250, temp: 67, status: âminingâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âASIC S19 Proâ, autoConfig: true },
{ id: 2, name: âTERAALPHA7â, hashRate: 95, power: 2900, temp: 63, status: âidleâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âASIC S17+â, autoConfig: true },
{ id: 3, name: âTERAOMEGA7â, hashRate: 125, power: 3500, temp: 71, status: âminingâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âCustom ASICâ, autoConfig: false },
{ id: 4, name: âTERANODE7â, hashRate: 130, power: 3600, temp: 69, status: âminingâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âASIC S19 Proâ, autoConfig: true },
{ id: 5, name: âTERAOPTIMUS7â, hashRate: 115, power: 3300, temp: 65, status: âidleâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âASIC S17+â, autoConfig: true },
{ id: 6, name: âTERAJUSTICE7â, hashRate: 120, power: 3400, temp: 68, status: âminingâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âCustom ASICâ, autoConfig: true },
{ id: 7, name: âTERAANNHARRIS7â, hashRate: 105, power: 3100, temp: 64, status: âminingâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âASIC S19 Proâ, autoConfig: true },
{ id: 8, name: âTERA-ZIG-MINER7â, hashRate: 140, power: 3800, temp: 72, status: âminingâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âCustom ASICâ, autoConfig: false }
]);

const [pools, setPools] = useState([
{ id: 1, name: âKLOUDBUGSCAFE POOLâ, url: âstratum+tcp://kloudbugscafe.pool:4444â, status: âconnectedâ, hashRate: 450, address: â1KloudBugsVeryLongAddressExample123456789â, managed: true },
{ id: 2, name: âTERA SOCIAL JUSTICE POOLâ, url: âstratum+tcp://terasocial.pool:3333â, status: âconnectedâ, hashRate: 490, address: âbc1qterasocialjusticeaddressexample987654321â, managed: true },
{ id: 3, name: âBackup Poolâ, url: âstratum+tcp://backup.pool:8080â, status: âconnectedâ, hashRate: 0, address: âbc1qbackupaddressexample111222333444555666â, managed: false }
]);

const [hardwareProfiles, setHardwareProfiles] = useState([
{ id: 1, name: âASIC S19 Proâ, maxHashRate: 110, powerDraw: 3250, algorithm: âSHA-256â },
{ id: 2, name: âASIC S17+â, maxHashRate: 95, powerDraw: 2900, algorithm: âSHA-256â },
{ id: 3, name: âASIC L7â, maxHashRate: 9500, powerDraw: 3425, algorithm: âScryptâ },
{ id: 4, name: âCustom ASICâ, maxHashRate: 150, powerDraw: 4000, algorithm: âSHA-256â }
]);

const [totalHashRate, setTotalHashRate] = useState(0);
const [newRig, setNewRig] = useState({ name: ââ, hardware: âASIC S19 Proâ, hashRate: 100, autoConfig: true });
const [newPool, setNewPool] = useState({ name: ââ, url: ââ, address: ââ, managed: false });
const [platformCapacity] = useState(7000); // 7000 TH/s capacity
const [rigCode, setRigCode] = useState(ââ);
const [showRigCreator, setShowRigCreator] = useState(false);

useEffect(() => {
const total = rigs.filter(rig => rig.status === âminingâ).reduce((sum, rig) => sum + rig.hashRate, 0);
setTotalHashRate(total);
}, [rigs]);

const createRig = () => {
if (newRig.name) {
const selectedHardware = hardwareProfiles.find(h => h.name === newRig.hardware);
const rig = {
id: rigs.length + 1,
name: newRig.name,
hashRate: parseInt(newRig.hashRate),
power: selectedHardware ? selectedHardware.powerDraw : parseInt(newRig.hashRate) * 25,
temp: Math.floor(Math.random() * 20) + 60,
status: âidleâ,
pool: âPlatform Poolâ,
hardware: newRig.hardware,
autoConfig: newRig.autoConfig
};
setRigs([â¦rigs, rig]);
setNewRig({ name: ââ, hardware: âASIC S19 Proâ, hashRate: 100, autoConfig: true });
}
};

const createCustomHardware = () => {
const newHardware = {
id: hardwareProfiles.length + 1,
name: `Custom Hardware ${hardwareProfiles.length + 1}`,
maxHashRate: 120,
powerDraw: 3200,
algorithm: âSHA-256â
};
setHardwareProfiles([â¦hardwareProfiles, newHardware]);
};

const toggleRig = (rigId) => {
setRigs(rigs.map(rig =>
rig.id === rigId
? { â¦rig, status: rig.status === âminingâ ? âidleâ : âminingâ }
: rig
));
};

const createPool = () => {
if (newPool.name && newPool.url) {
const pool = {
id: pools.length + 1,
name: newPool.name,
url: newPool.url,
address: newPool.address,
status: âconnectedâ,
hashRate: 0,
managed: newPool.managed
};
setPools([â¦pools, pool]);
setNewPool({ name: ââ, url: ââ, address: ââ, managed: false });
}
};

const assignRigToPool = (rigId, poolName) => {
setRigs(rigs.map(rig =>
rig.id === rigId ? { â¦rig, pool: poolName } : rig
));
};

const autoConfigureRig = (rigId) => {
setRigs(rigs.map(rig =>
rig.id === rigId
? { â¦rig, autoConfig: !rig.autoConfig, status: âconfiguringâ }
: rig
));

```
// Simulate auto-configuration
setTimeout(() => {
 setRigs(prevRigs =>
   prevRigs.map(rig =>
     rig.id === rigId
       ? { ...rig, status: 'idle', temp: Math.floor(Math.random() * 15) + 55 }
       : rig
   )
 );
}, 2000);
```

};

const deployRigCode = () => {
if (rigCode.trim()) {
// Simulate code deployment to create a new rig
const codeRig = {
id: rigs.length + 1,
name: `Code Rig ${rigs.length + 1}`,
hashRate: Math.floor(Math.random() * 50) + 80,
power: Math.floor(Math.random() * 1000) + 2500,
temp: Math.floor(Math.random() * 20) + 60,
status: âidleâ,
pool: âPlatform Poolâ,
hardware: âCustom Codedâ,
autoConfig: true
};
setRigs([â¦rigs, codeRig]);
setRigCode(ââ);
alert(âRig successfully coded and deployed!â);
}
};

const renderDashboard = () => (
<div className="space-y-6">
<div className="grid grid-cols-1 md:grid-cols-4 gap-4">
<div className="bg-blue-50 p-4 rounded-lg border">
<div className="flex items-center justify-between">
<div>
<p className="text-sm text-gray-600">Total Hash Rate</p>
<p className="text-2xl font-bold text-blue-600">{totalHashRate} TH/s</p>
<p className="text-xs text-gray-500">of {platformCapacity} TH/s capacity</p>
</div>
<TrendingUp className="h-8 w-8 text-blue-500" />
</div>
</div>

```
   <div className="bg-green-50 p-4 rounded-lg border">
     <div className="flex items-center justify-between">
       <div>
         <p className="text-sm text-gray-600">Active Rigs</p>
         <p className="text-2xl font-bold text-green-600">{rigs.filter(r => r.status === 'mining').length}</p>
         <p className="text-xs text-gray-500">of {rigs.length} total rigs</p>
       </div>
       <Cpu className="h-8 w-8 text-green-500" />
     </div>
   </div>

   <div className="bg-yellow-50 p-4 rounded-lg border">
     <div className="flex items-center justify-between">
       <div>
         <p className="text-sm text-gray-600">Power Usage</p>
         <p className="text-2xl font-bold text-yellow-600">{rigs.reduce((sum, rig) => sum + (rig.status === 'mining' ? rig.power : 0), 0)}W</p>
         <p className="text-xs text-gray-500">Active consumption</p>
       </div>
       <Zap className="h-8 w-8 text-yellow-500" />
     </div>
   </div>

   <div className="bg-purple-50 p-4 rounded-lg border">
     <div className="flex items-center justify-between">
       <div>
         <p className="text-sm text-gray-600">Platform Usage</p>
         <p className="text-2xl font-bold text-purple-600">{(totalHashRate / platformCapacity * 100).toFixed(1)}%</p>
         <p className="text-xs text-gray-500">Capacity utilized</p>
       </div>
       <Database className="h-8 w-8 text-purple-500" />
     </div>
   </div>
 </div>

 <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
       <Server className="h-5 w-5" />
       Active Mining Rigs
     </h3>
     <div className="space-y-3">
       {rigs.filter(rig => rig.status === 'mining').map(rig => (
         <div key={rig.id} className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
           <div>
             <p className="font-medium">{rig.name}</p>
             <p className="text-sm text-gray-600">{rig.hardware} - {rig.hashRate} TH/s</p>
           </div>
           <div className="text-right">
             <p className="text-sm font-medium text-green-600">{rig.temp}Â°C</p>
             <p className="text-xs text-gray-500">{rig.pool}</p>
           </div>
         </div>
       ))}
     </div>
   </div>

   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
       <Network className="h-5 w-5" />
       Pool Status
     </h3>
     <div className="space-y-3">
       {pools.map(pool => (
         <div key={pool.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
           <div>
             <p className="font-medium flex items-center gap-2">
               {pool.name}
               {pool.managed && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Managed</span>}
             </p>
             <p className="text-sm text-gray-600">{pool.hashRate} TH/s</p>
           </div>
           <div className="flex items-center gap-2">
             <CheckCircle className="h-4 w-4 text-green-500" />
             <span className="text-sm text-green-600">Connected</span>
           </div>
         </div>
       ))}
     </div>
   </div>
 </div>
</div>
```

);

const renderRigs = () => (
<div className="space-y-6">
<div className="flex justify-between items-center">
<h2 className="text-2xl font-bold">Mining Rigs Management</h2>
<button
onClick={() => setShowRigCreator(!showRigCreator)}
className=âbg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2â

<Plus className="h-4 w-4" />
Create New Rig
</button>
</div>

```
 {showRigCreator && (
   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">Create New Mining Rig</h3>
     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
       <input
         type="text"
         placeholder="Rig Name"
         value={newRig.name}
         onChange={(e) => setNewRig({...newRig, name: e.target.value})}
         className="border rounded-lg px-3 py-2"
       />
       <select
         value={newRig.hardware}
         onChange={(e) => setNewRig({...newRig, hardware: e.target.value})}
         className="border rounded-lg px-3 py-2"

         {hardwareProfiles.map(hw => (
           <option key={hw.id} value={hw.name}>{hw.name}</option>
         ))}
       </select>
       <input
         type="number"
         placeholder="Hash Rate (TH/s)"
         value={newRig.hashRate}
         onChange={(e) => setNewRig({...newRig, hashRate: e.target.value})}
         className="border rounded-lg px-3 py-2"
       />
       <div className="flex items-center gap-2">
         <input
           type="checkbox"
           checked={newRig.autoConfig}
           onChange={(e) => setNewRig({...newRig, autoConfig: e.target.checked})}
           className="rounded"
         />
         <label className="text-sm">Auto-configure</label>
       </div>
     </div>
     <div className="flex gap-2">
       <button
         onClick={createRig}
         className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"

         Create Rig
       </button>
       <button
         onClick={createCustomHardware}
         className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700"

         Add Custom Hardware
       </button>
     </div>
   </div>
 )}

 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">All Mining Rigs</h3>
   <div className="overflow-x-auto">
     <table className="w-full">
       <thead>
         <tr className="border-b">
           <th className="text-left p-2">Rig Name</th>
           <th className="text-left p-2">Hardware</th>
           <th className="text-left p-2">Hash Rate</th>
           <th className="text-left p-2">Power</th>
           <th className="text-left p-2">Temp</th>
           <th className="text-left p-2">Pool</th>
           <th className="text-left p-2">Status</th>
           <th className="text-left p-2">Auto-Config</th>
           <th className="text-left p-2">Actions</th>
         </tr>
       </thead>
       <tbody>
         {rigs.map(rig => (
           <tr key={rig.id} className="border-b hover:bg-gray-50">
             <td className="p-2 font-medium">{rig.name}</td>
             <td className="p-2 text-sm">{rig.hardware}</td>
             <td className="p-2">{rig.hashRate} TH/s</td>
             <td className="p-2">{rig.power}W</td>
             <td className="p-2">{rig.temp}Â°C</td>
             <td className="p-2">
               <select
                 value={rig.pool}
                 onChange={(e) => assignRigToPool(rig.id, e.target.value)}
                 className="text-sm border rounded px-2 py-1"

                 {pools.map(pool => (
                   <option key={pool.id} value={pool.name}>{pool.name}</option>
                 ))}
               </select>
             </td>
             <td className="p-2">
               <span className={`px-2 py-1 rounded-full text-xs ${
                 rig.status === 'mining' ? 'bg-green-100 text-green-800' :
                 rig.status === 'configuring' ? 'bg-yellow-100 text-yellow-800' :
                 'bg-gray-100 text-gray-800'
               }`}>
                 {rig.status}
               </span>
             </td>
             <td className="p-2">
               <button
                 onClick={() => autoConfigureRig(rig.id)}
                 className={`p-1 rounded text-xs ${
                   rig.autoConfig ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                 }`}

                 {rig.autoConfig ? 'ON' : 'OFF'}
               </button>
             </td>
             <td className="p-2">
               <div className="flex gap-1">
                 <button
                   onClick={() => toggleRig(rig.id)}
                   className={`p-1 rounded ${
                     rig.status === 'mining' ? 'text-red-600 hover:bg-red-50' : 'text-green-600 hover:bg-green-50'
                   }`}

                   {rig.status === 'mining' ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                 </button>
                 <button className="p-1 rounded text-blue-600 hover:bg-blue-50">
                   <Settings className="h-4 w-4" />
                 </button>
               </div>
             </td>
           </tr>
         ))}
       </tbody>
     </table>
   </div>
 </div>
</div>
```

);

const renderPools = () => (
<div className="space-y-6">
<div className="flex justify-between items-center">
<h2 className="text-2xl font-bold">Pool Management</h2>
</div>

```
 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">Add New Pool</h3>
   <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
     <input
       type="text"
       placeholder="Pool Name"
       value={newPool.name}
       onChange={(e) => setNewPool({...newPool, name: e.target.value})}
       className="border rounded-lg px-3 py-2"
     />
     <input
       type="text"
       placeholder="Pool URL (stratum+tcp://...)"
       value={newPool.url}
       onChange={(e) => setNewPool({...newPool, url: e.target.value})}
       className="border rounded-lg px-3 py-2"
     />
     <input
       type="text"
       placeholder="Platform Address"
       value={newPool.address}
       onChange={(e) => setNewPool({...newPool, address: e.target.value})}
       className="border rounded-lg px-3 py-2"
     />
     <div className="flex items-center gap-2">
       <input
         type="checkbox"
         checked={newPool.managed}
         onChange={(e) => setNewPool({...newPool, managed: e.target.checked})}
         className="rounded"
       />
       <label className="text-sm">Platform Managed Pool</label>
     </div>
   </div>
   <button
     onClick={createPool}
     className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"

     Add Pool
   </button>
 </div>

 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">Connected Pools</h3>
   <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
     {pools.map(pool => (
       <div key={pool.id} className="border rounded-lg p-4">
         <div className="flex items-center justify-between mb-2">
           <h4 className="font-medium flex items-center gap-2">
             {pool.name}
             {pool.managed && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Managed</span>}
           </h4>
           <div className="flex items-center gap-1">
             <CheckCircle className="h-4 w-4 text-green-500" />
             <span className="text-sm text-green-600">{pool.status}</span>
           </div>
         </div>
         <p className="text-sm text-gray-600 mb-1">URL: {pool.url}</p>
         <p className="text-sm text-gray-600 mb-2">Address: {pool.address}</p>
         <div className="flex items-center justify-between">
           <span className="text-sm font-medium">Hash Rate: {pool.hashRate} TH/s</span>
           <div className="flex gap-2">
             <button className="text-blue-600 hover:bg-blue-50 p-1 rounded">
               <Settings className="h-4 w-4" />
             </button>
             <button className="text-green-600 hover:bg-green-50 p-1 rounded">
               <Wifi className="h-4 w-4" />
             </button>
           </div>
         </div>
       </div>
     ))}
   </div>
 </div>
</div>
```

);

const renderCoding = () => (
<div className="space-y-6">
<div className="flex justify-between items-center">
<h2 className="text-2xl font-bold">Rig Coding Interface</h2>
</div>

```
 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
     <Code className="h-5 w-5" />
     Code Your Own Mining Rig
   </h3>
   <p className="text-gray-600 mb-4">Write code to automatically configure and deploy new mining rigs with custom parameters.</p>

   <div className="mb-4">
     <label className="block text-sm font-medium mb-2">Rig Configuration Code</label>
     <textarea
       value={rigCode}
       onChange={(e) => setRigCode(e.target.value)}
       placeholder={`// Example rig configuration
```

{
ânameâ: âCustomRig_${Date.now()}â,
âhardwareâ: âASIC_Customâ,
âhashRateâ: 120,
âpowerLimitâ: 3200,
âtempThresholdâ: 75,
âalgorithmâ: âSHA-256â,
âautoOptimizeâ: true,
âpoolPriorityâ: [âPlatform Poolâ, âPool Aâ],
âoverclockProfileâ: âbalancedâ
}`}
className=âw-full h-64 border rounded-lg px-3 py-2 font-mono text-smâ
/>
</div>

```
   <div className="flex gap-2 mb-4">
     <button
       onClick={deployRigCode}
       className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2"

       <Play className="h-4 w-4" />
       Deploy Rig
     </button>
     <button
       onClick={() => setRigCode('')}
       className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"

       Clear Code
     </button>
   </div>

   <div className="bg-gray-50 p-4 rounded-lg">
     <h4 className="font-medium mb-2">Available APIs & Functions:</h4>
     <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
       <div>â¢ createRig(config)</div>
       <div>â¢ optimizeHashRate(rigId)</div>
       <div>â¢ setPoolConnection(rigId, poolUrl)</div>
       <div>â¢ autoTuneHardware(rigId)</div>
       <div>â¢ monitorTemperature(rigId)</div>
       <div>â¢ scheduleMaintenance(rigId, interval)</div>
       <div>â¢ enableOverclock(rigId, profile)</div>
       <div>â¢ setPowerLimit(rigId, watts)</div>
     </div>
   </div>
 </div>

 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">Hardware Profiles</h3>
   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
     {hardwareProfiles.map(hw => (
       <div key={hw.id} className="border rounded-lg p-4">
         <h4 className="font-medium mb-2">{hw.name}</h4>
         <div className="text-sm text-gray-600 space-y-1">
           <p>Max Hash Rate: {hw.maxHashRate} TH/s</p>
           <p>Power Draw: {hw.powerDraw}W</p>
           <p>Algorithm: {hw.algorithm}</p>
         </div>
         <button className="mt-2 text-blue-600 hover:bg-blue-50 px-2 py-1 rounded text-sm">
           Use in Code
         </button>
       </div>
     ))}
   </div>
 </div>
</div>
```

);

const renderAnalytics = () => (
<div className="space-y-6">
<h2 className="text-2xl font-bold">Platform Analytics</h2>

```
 <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">Efficiency Metrics</h3>
     <div className="space-y-3">
       <div className="flex justify-between">
         <span className="text-gray-600">Hash/Watt Ratio:</span>
         <span className="font-medium">{(totalHashRate / (rigs.reduce((sum, rig) => sum + (rig.status === 'mining' ? rig.power : 0), 0) / 1000) || 0).toFixed(2)} TH/kW</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Platform Utilization:</span>
         <span className="font-medium">{(totalHashRate / platformCapacity * 100).toFixed(1)}%</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Active Uptime:</span>
         <span className="font-medium">99.2%</span>
       </div>
     </div>
   </div>

   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">Revenue Projection</h3>
     <div className="space-y-3">
       <div className="flex justify-between">
         <span className="text-gray-600">Daily Estimate:</span>
         <span className="font-medium text-green-600">$245.80</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Monthly Estimate:</span>
         <span className="font-medium text-green-600">$7,374</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Power Cost:</span>
         <span className="font-medium text-red-600">-$89.20/day</span>
       </div>
     </div>
   </div>

   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">System Health</h3>
     <div className="space-y-3">
       <div className="flex justify-between">
         <span className="text-gray-600">Avg Temperature:</span>
         <span className="font-medium">67Â°C</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Error Rate:</span>
         <span className="font-medium text-green-600">0.02%
```import React, { useState, useEffect } from âreactâ;
import { Settings, Cpu, Zap, Globe, Database, Plus, Play, Pause, AlertTriangle, CheckCircle, TrendingUp, DollarSign, Code, Monitor, Server, Wifi, BarChart3, Wrench, Network } from âlucide-reactâ;

const MiningPlatform = () => {
const [activeTab, setActiveTab] = useState(âdashboardâ);
const [rigs, setRigs] = useState([
{ id: 1, name: âTERACORE7â, hashRate: 110, power: 3250, temp: 67, status: âminingâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âASIC S19 Proâ, autoConfig: true },
{ id: 2, name: âTERAALPHA7â, hashRate: 95, power: 2900, temp: 63, status: âidleâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âASIC S17+â, autoConfig: true },
{ id: 3, name: âTERAOMEGA7â, hashRate: 125, power: 3500, temp: 71, status: âminingâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âCustom ASICâ, autoConfig: false },
{ id: 4, name: âTERANODE7â, hashRate: 130, power: 3600, temp: 69, status: âminingâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âASIC S19 Proâ, autoConfig: true },
{ id: 5, name: âTERAOPTIMUS7â, hashRate: 115, power: 3300, temp: 65, status: âidleâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âASIC S17+â, autoConfig: true },
{ id: 6, name: âTERAJUSTICE7â, hashRate: 120, power: 3400, temp: 68, status: âminingâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âCustom ASICâ, autoConfig: true },
{ id: 7, name: âTERAANNHARRIS7â, hashRate: 105, power: 3100, temp: 64, status: âminingâ, pool: âKLOUDBUGSCAFE POOLâ, hardware: âASIC S19 Proâ, autoConfig: true },
{ id: 8, name: âTERA-ZIG-MINER7â, hashRate: 140, power: 3800, temp: 72, status: âminingâ, pool: âTERA SOCIAL JUSTICE POOLâ, hardware: âCustom ASICâ, autoConfig: false }
]);

const [pools, setPools] = useState([
{ id: 1, name: âKLOUDBUGSCAFE POOLâ, url: âstratum+tcp://kloudbugscafe.pool:4444â, status: âconnectedâ, hashRate: 450, address: âbc1qj93mnxgm0xuwyh3jvvqurjxjyq8uktg4y0sad6â, username: âKloudbugs7â, managed: true },
{ id: 2, name: âTERA SOCIAL JUSTICE POOLâ, url: âstratum+tcp://terasocial.pool:3333â, status: âconnectedâ, hashRate: 490, address: âbc1qfavnkrku005m4kdkvdtgthur4ha06us2lppdpsâ, username: âKloudbugs7â, managed: true },
{ id: 3, name: âSlush Poolâ, url: âstratum+tcp://stratum.slushpool.com:4444â, status: âreadyâ, hashRate: 0, address: âbc1qj93mnxgm0xuwyh3jvvqurjxjyq8uktg4y0sad6â, username: âKloudbugs7â, managed: false },
{ id: 4, name: âF2Poolâ, url: âstratum+tcp://stratum.f2pool.com:3333â, status: âreadyâ, hashRate: 0, address: âbc1qj93mnxgm0xuwyh3jvvqurjxjyq8uktg4y0sad6â, username: âKloudbugs7â, managed: false },
{ id: 5, name: âAntpoolâ, url: âstratum+tcp://stratum.antpool.com:3333â, status: âreadyâ, hashRate: 0, address: âbc1qj93mnxgm0xuwyh3jvvqurjxjyq8uktg4y0sad6â, username: âKloudbugs7â, managed: false }
]);

const [hardwareProfiles, setHardwareProfiles] = useState([
{ id: 1, name: âASIC S19 Proâ, maxHashRate: 110, powerDraw: 3250, algorithm: âSHA-256â },
{ id: 2, name: âASIC S17+â, maxHashRate: 95, powerDraw: 2900, algorithm: âSHA-256â },
{ id: 3, name: âASIC L7â, maxHashRate: 9500, powerDraw: 3425, algorithm: âScryptâ },
{ id: 4, name: âCustom ASICâ, maxHashRate: 150, powerDraw: 4000, algorithm: âSHA-256â }
]);

const [totalHashRate, setTotalHashRate] = useState(0);
const [newRig, setNewRig] = useState({ name: ââ, hardware: âASIC S19 Proâ, hashRate: 100, autoConfig: true });
const [newPool, setNewPool] = useState({ name: ââ, url: ââ, address: âbc1qj93mnxgm0xuwyh3jvvqurjxjyq8uktg4y0sad6â, username: âKloudbugs7â, managed: false });
const [platformCapacity] = useState(7000); // 7000 TH/s capacity
const [rigCode, setRigCode] = useState(ââ);
const [showRigCreator, setShowRigCreator] = useState(false);

useEffect(() => {
const total = rigs.filter(rig => rig.status === âminingâ).reduce((sum, rig) => sum + rig.hashRate, 0);
setTotalHashRate(total);
}, [rigs]);

const createRig = () => {
if (newRig.name) {
const selectedHardware = hardwareProfiles.find(h => h.name === newRig.hardware);
const rig = {
id: rigs.length + 1,
name: newRig.name,
hashRate: parseInt(newRig.hashRate),
power: selectedHardware ? selectedHardware.powerDraw : parseInt(newRig.hashRate) * 25,
temp: Math.floor(Math.random() * 20) + 60,
status: âidleâ,
pool: âPlatform Poolâ,
hardware: newRig.hardware,
autoConfig: newRig.autoConfig
};
setRigs([â¦rigs, rig]);
setNewRig({ name: ââ, hardware: âASIC S19 Proâ, hashRate: 100, autoConfig: true });
}
};

const createCustomHardware = () => {
const newHardware = {
id: hardwareProfiles.length + 1,
name: `Custom Hardware ${hardwareProfiles.length + 1}`,
maxHashRate: 120,
powerDraw: 3200,
algorithm: âSHA-256â
};
setHardwareProfiles([â¦hardwareProfiles, newHardware]);
};

const toggleRig = (rigId) => {
setRigs(rigs.map(rig =>
rig.id === rigId
? { â¦rig, status: rig.status === âminingâ ? âidleâ : âminingâ }
: rig
));
};

const createPool = () => {
if (newPool.name && newPool.url) {
const pool = {
id: pools.length + 1,
name: newPool.name,
url: newPool.url,
address: newPool.address,
status: âconnectedâ,
hashRate: 0,
managed: newPool.managed
};
setPools([â¦pools, pool]);
setNewPool({ name: ââ, url: ââ, address: ââ, managed: false });
}
};

const assignRigToPool = (rigId, poolName) => {
setRigs(rigs.map(rig =>
rig.id === rigId ? { â¦rig, pool: poolName } : rig
));
};

const autoConfigureRig = (rigId) => {
setRigs(rigs.map(rig =>
rig.id === rigId
? { â¦rig, autoConfig: !rig.autoConfig, status: âconfiguringâ }
: rig
));

```
// Simulate auto-configuration
setTimeout(() => {
 setRigs(prevRigs =>
   prevRigs.map(rig =>
     rig.id === rigId
       ? { ...rig, status: 'idle', temp: Math.floor(Math.random() * 15) + 55 }
       : rig
   )
 );
}, 2000);
```

};

const deployRigCode = () => {
if (rigCode.trim()) {
// Simulate code deployment to create a new rig
const codeRig = {
id: rigs.length + 1,
name: `Code Rig ${rigs.length + 1}`,
hashRate: Math.floor(Math.random() * 50) + 80,
power: Math.floor(Math.random() * 1000) + 2500,
temp: Math.floor(Math.random() * 20) + 60,
status: âidleâ,
pool: âPlatform Poolâ,
hardware: âCustom Codedâ,
autoConfig: true
};
setRigs([â¦rigs, codeRig]);
setRigCode(ââ);
alert(âRig successfully coded and deployed!â);
}
};

const renderDashboard = () => (
<div className="space-y-6">
<div className="grid grid-cols-1 md:grid-cols-4 gap-4">
<div className="bg-blue-50 p-4 rounded-lg border">
<div className="flex items-center justify-between">
<div>
<p className="text-sm text-gray-600">Total Hash Rate</p>
<p className="text-2xl font-bold text-blue-600">{totalHashRate} TH/s</p>
<p className="text-xs text-gray-500">of {platformCapacity} TH/s capacity</p>
</div>
<TrendingUp className="h-8 w-8 text-blue-500" />
</div>
</div>

```
   <div className="bg-green-50 p-4 rounded-lg border">
     <div className="flex items-center justify-between">
       <div>
         <p className="text-sm text-gray-600">Active Rigs</p>
         <p className="text-2xl font-bold text-green-600">{rigs.filter(r => r.status === 'mining').length}</p>
         <p className="text-xs text-gray-500">of {rigs.length} total rigs</p>
       </div>
       <Cpu className="h-8 w-8 text-green-500" />
     </div>
   </div>

   <div className="bg-yellow-50 p-4 rounded-lg border">
     <div className="flex items-center justify-between">
       <div>
         <p className="text-sm text-gray-600">Power Usage</p>
         <p className="text-2xl font-bold text-yellow-600">{rigs.reduce((sum, rig) => sum + (rig.status === 'mining' ? rig.power : 0), 0)}W</p>
         <p className="text-xs text-gray-500">Active consumption</p>
       </div>
       <Zap className="h-8 w-8 text-yellow-500" />
     </div>
   </div>

   <div className="bg-purple-50 p-4 rounded-lg border">
     <div className="flex items-center justify-between">
       <div>
         <p className="text-sm text-gray-600">Platform Usage</p>
         <p className="text-2xl font-bold text-purple-600">{(totalHashRate / platformCapacity * 100).toFixed(1)}%</p>
         <p className="text-xs text-gray-500">Capacity utilized</p>
       </div>
       <Database className="h-8 w-8 text-purple-500" />
     </div>
   </div>
 </div>

 <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
       <Server className="h-5 w-5" />
       Active Mining Rigs
     </h3>
     <div className="space-y-3">
       {rigs.filter(rig => rig.status === 'mining').map(rig => (
         <div key={rig.id} className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
           <div>
             <p className="font-medium">{rig.name}</p>
             <p className="text-sm text-gray-600">{rig.hardware} - {rig.hashRate} TH/s</p>
           </div>
           <div className="text-right">
             <p className="text-sm font-medium text-green-600">{rig.temp}Â°C</p>
             <p className="text-xs text-gray-500">{rig.pool}</p>
           </div>
         </div>
       ))}
     </div>
   </div>

   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
       <Network className="h-5 w-5" />
       Pool Status
     </h3>
     <div className="space-y-3">
       {pools.map(pool => (
         <div key={pool.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
           <div>
             <p className="font-medium flex items-center gap-2">
               {pool.name}
               {pool.managed && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Managed</span>}
             </p>
             <p className="text-sm text-gray-600">{pool.hashRate} TH/s</p>
           </div>
           <div className="flex items-center gap-2">
             <CheckCircle className="h-4 w-4 text-green-500" />
             <span className="text-sm text-green-600">Connected</span>
           </div>
         </div>
       ))}
     </div>
   </div>
 </div>
</div>
```

);

const renderRigs = () => (
<div className="space-y-6">
<div className="flex justify-between items-center">
<h2 className="text-2xl font-bold">Mining Rigs Management</h2>
<button
onClick={() => setShowRigCreator(!showRigCreator)}
className=âbg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2â

<Plus className="h-4 w-4" />
Create New Rig
</button>
</div>

```
 {showRigCreator && (
   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">Create New Mining Rig</h3>
     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
       <input
         type="text"
         placeholder="Rig Name"
         value={newRig.name}
         onChange={(e) => setNewRig({...newRig, name: e.target.value})}
         className="border rounded-lg px-3 py-2"
       />
       <select
         value={newRig.hardware}
         onChange={(e) => setNewRig({...newRig, hardware: e.target.value})}
         className="border rounded-lg px-3 py-2"

         {hardwareProfiles.map(hw => (
           <option key={hw.id} value={hw.name}>{hw.name}</option>
         ))}
       </select>
       <input
         type="number"
         placeholder="Hash Rate (TH/s)"
         value={newRig.hashRate}
         onChange={(e) => setNewRig({...newRig, hashRate: e.target.value})}
         className="border rounded-lg px-3 py-2"
       />
       <div className="flex items-center gap-2">
         <input
           type="checkbox"
           checked={newRig.autoConfig}
           onChange={(e) => setNewRig({...newRig, autoConfig: e.target.checked})}
           className="rounded"
         />
         <label className="text-sm">Auto-configure</label>
       </div>
     </div>
     <div className="flex gap-2">
       <button
         onClick={createRig}
         className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"

         Create Rig
       </button>
       <button
         onClick={createCustomHardware}
         className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700"

         Add Custom Hardware
       </button>
     </div>
   </div>
 )}

 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">All Mining Rigs</h3>
   <div className="overflow-x-auto">
     <table className="w-full">
       <thead>
         <tr className="border-b">
           <th className="text-left p-2">Rig Name</th>
           <th className="text-left p-2">Hardware</th>
           <th className="text-left p-2">Hash Rate</th>
           <th className="text-left p-2">Power</th>
           <th className="text-left p-2">Temp</th>
           <th className="text-left p-2">Pool</th>
           <th className="text-left p-2">Status</th>
           <th className="text-left p-2">Auto-Config</th>
           <th className="text-left p-2">Actions</th>
         </tr>
       </thead>
       <tbody>
         {rigs.map(rig => (
           <tr key={rig.id} className="border-b hover:bg-gray-50">
             <td className="p-2 font-medium">{rig.name}</td>
             <td className="p-2 text-sm">{rig.hardware}</td>
             <td className="p-2">{rig.hashRate} TH/s</td>
             <td className="p-2">{rig.power}W</td>
             <td className="p-2">{rig.temp}Â°C</td>
             <td className="p-2">
               <select
                 value={rig.pool}
                 onChange={(e) => assignRigToPool(rig.id, e.target.value)}
                 className="text-sm border rounded px-2 py-1"

                 {pools.map(pool => (
                   <option key={pool.id} value={pool.name}>{pool.name}</option>
                 ))}
               </select>
             </td>
             <td className="p-2">
               <span className={`px-2 py-1 rounded-full text-xs ${
                 rig.status === 'mining' ? 'bg-green-100 text-green-800' :
                 rig.status === 'configuring' ? 'bg-yellow-100 text-yellow-800' :
                 'bg-gray-100 text-gray-800'
               }`}>
                 {rig.status}
               </span>
             </td>
             <td className="p-2">
               <button
                 onClick={() => autoConfigureRig(rig.id)}
                 className={`p-1 rounded text-xs ${
                   rig.autoConfig ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                 }`}

                 {rig.autoConfig ? 'ON' : 'OFF'}
               </button>
             </td>
             <td className="p-2">
               <div className="flex gap-1">
                 <button
                   onClick={() => toggleRig(rig.id)}
                   className={`p-1 rounded ${
                     rig.status === 'mining' ? 'text-red-600 hover:bg-red-50' : 'text-green-600 hover:bg-green-50'
                   }`}

                   {rig.status === 'mining' ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                 </button>
                 <button className="p-1 rounded text-blue-600 hover:bg-blue-50">
                   <Settings className="h-4 w-4" />
                 </button>
               </div>
             </td>
           </tr>
         ))}
       </tbody>
     </table>
   </div>
 </div>
</div>
```

);

const renderPools = () => (
<div className="space-y-6">
<div className="flex justify-between items-center">
<h2 className="text-2xl font-bold">Pool Management</h2>
</div>

```
 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">Add New Pool</h3>
   <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
     <input
       type="text"
       placeholder="Pool Name"
       value={newPool.name}
       onChange={(e) => setNewPool({...newPool, name: e.target.value})}
       className="border rounded-lg px-3 py-2"
     />
     <input
       type="text"
       placeholder="Pool URL (stratum+tcp://...)"
       value={newPool.url}
       onChange={(e) => setNewPool({...newPool, url: e.target.value})}
       className="border rounded-lg px-3 py-2"
     />
     <input
       type="text"
       placeholder="Platform Address"
       value={newPool.address}
       onChange={(e) => setNewPool({...newPool, address: e.target.value})}
       className="border rounded-lg px-3 py-2"
     />
     <div className="flex items-center gap-2">
       <input
         type="checkbox"
         checked={newPool.managed}
         onChange={(e) => setNewPool({...newPool, managed: e.target.checked})}
         className="rounded"
       />
       <label className="text-sm">Platform Managed Pool</label>
     </div>
   </div>
   <button
     onClick={createPool}
     className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"

     Add Pool
   </button>
 </div>

 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">Connected Pools</h3>
   <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
     {pools.map(pool => (
       <div key={pool.id} className="border rounded-lg p-4">
         <div className="flex items-center justify-between mb-2">
           <h4 className="font-medium flex items-center gap-2">
             {pool.name}
             {pool.managed && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Managed</span>}
           </h4>
           <div className="flex items-center gap-1">
             <CheckCircle className="h-4 w-4 text-green-500" />
             <span className="text-sm text-green-600">{pool.status}</span>
           </div>
         </div>
         <p className="text-sm text-gray-600 mb-1">URL: {pool.url}</p>
         <p className="text-sm text-gray-600 mb-2">Address: {pool.address}</p>
         <div className="flex items-center justify-between">
           <span className="text-sm font-medium">Hash Rate: {pool.hashRate} TH/s</span>
           <div className="flex gap-2">
             <button className="text-blue-600 hover:bg-blue-50 p-1 rounded">
               <Settings className="h-4 w-4" />
             </button>
             <button className="text-green-600 hover:bg-green-50 p-1 rounded">
               <Wifi className="h-4 w-4" />
             </button>
           </div>
         </div>
       </div>
     ))}
   </div>
 </div>
</div>
```

);

const renderCoding = () => (
<div className="space-y-6">
<div className="flex justify-between items-center">
<h2 className="text-2xl font-bold">Rig Coding Interface</h2>
</div>

```
 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
     <Code className="h-5 w-5" />
     Code Your Own Mining Rig
   </h3>
   <p className="text-gray-600 mb-4">Write code to automatically configure and deploy new mining rigs with custom parameters.</p>

   <div className="mb-4">
     <label className="block text-sm font-medium mb-2">Rig Configuration Code</label>
     <textarea
       value={rigCode}
       onChange={(e) => setRigCode(e.target.value)}
       placeholder={`// Example rig configuration
```

{
ânameâ: âCustomRig_${Date.now()}â,
âhardwareâ: âASIC_Customâ,
âhashRateâ: 120,
âpowerLimitâ: 3200,
âtempThresholdâ: 75,
âalgorithmâ: âSHA-256â,
âautoOptimizeâ: true,
âpoolPriorityâ: [âPlatform Poolâ, âPool Aâ],
âoverclockProfileâ: âbalancedâ
}`}
className=âw-full h-64 border rounded-lg px-3 py-2 font-mono text-smâ
/>
</div>

```
   <div className="flex gap-2 mb-4">
     <button
       onClick={deployRigCode}
       className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2"

       <Play className="h-4 w-4" />
       Deploy Rig
     </button>
     <button
       onClick={() => setRigCode('')}
       className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"

       Clear Code
     </button>
   </div>

   <div className="bg-gray-50 p-4 rounded-lg">
     <h4 className="font-medium mb-2">Available APIs & Functions:</h4>
     <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
       <div>â¢ createRig(config)</div>
       <div>â¢ optimizeHashRate(rigId)</div>
       <div>â¢ setPoolConnection(rigId, poolUrl)</div>
       <div>â¢ autoTuneHardware(rigId)</div>
       <div>â¢ monitorTemperature(rigId)</div>
       <div>â¢ scheduleMaintenance(rigId, interval)</div>
       <div>â¢ enableOverclock(rigId, profile)</div>
       <div>â¢ setPowerLimit(rigId, watts)</div>
     </div>
   </div>
 </div>

 <div className="bg-white p-6 rounded-lg border">
   <h3 className="text-lg font-semibold mb-4">Hardware Profiles</h3>
   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
     {hardwareProfiles.map(hw => (
       <div key={hw.id} className="border rounded-lg p-4">
         <h4 className="font-medium mb-2">{hw.name}</h4>
         <div className="text-sm text-gray-600 space-y-1">
           <p>Max Hash Rate: {hw.maxHashRate} TH/s</p>
           <p>Power Draw: {hw.powerDraw}W</p>
           <p>Algorithm: {hw.algorithm}</p>
         </div>
         <button className="mt-2 text-blue-600 hover:bg-blue-50 px-2 py-1 rounded text-sm">
           Use in Code
         </button>
       </div>
     ))}
   </div>
 </div>
</div>
```

);

const renderAnalytics = () => (
<div className="space-y-6">
<h2 className="text-2xl font-bold">Platform Analytics</h2>

```
 <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">Efficiency Metrics</h3>
     <div className="space-y-3">
       <div className="flex justify-between">
         <span className="text-gray-600">Hash/Watt Ratio:</span>
         <span className="font-medium">{(totalHashRate / (rigs.reduce((sum, rig) => sum + (rig.status === 'mining' ? rig.power : 0), 0) / 1000) || 0).toFixed(2)} TH/kW</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Platform Utilization:</span>
         <span className="font-medium">{(totalHashRate / platformCapacity * 100).toFixed(1)}%</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Active Uptime:</span>
         <span className="font-medium">99.2%</span>
       </div>
     </div>
   </div>

   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">Revenue Projection</h3>
     <div className="space-y-3">
       <div className="flex justify-between">
         <span className="text-gray-600">Daily Estimate:</span>
         <span className="font-medium text-green-600">$245.80</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Monthly Estimate:</span>
         <span className="font-medium text-green-600">$7,374</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Power Cost:</span>
         <span className="font-medium text-red-600">-$89.20/day</span>
       </div>
     </div>
   </div>

   <div className="bg-white p-6 rounded-lg border">
     <h3 className="text-lg font-semibold mb-4">System Health</h3>
     <div className="space-y-3">
       <div className="flex justify-between">
         <span className="text-gray-600">Avg Temperature:</span>
         <span className="font-medium">67Â°C</span>
       </div>
       <div className="flex justify-between">
         <span className="text-gray-600">Error Rate:</span>
         <span className="font-medium text-green-600">0.02%
```

